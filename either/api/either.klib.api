// Klib ABI Dump
// Targets: [linuxArm64, linuxX64, macosArm64, macosX64, mingwX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <io.github.sphrak:either>
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (io.github.sphrak.either/Either<#B, #C>).io.github.sphrak.either/map(kotlin/Function1<#C, #A>): io.github.sphrak.either/Either<#B, #A> // io.github.sphrak.either/map|map@io.github.sphrak.either.Either<0:1,0:2>(kotlin.Function1<0:2,0:0>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (io.github.sphrak.either/Either<#A, #B>).io.github.sphrak.either.extension/onError(kotlin/Function1<#A, io.github.sphrak.either/Either<#A, #B>>): io.github.sphrak.either/Either<#A, #B> // io.github.sphrak.either.extension/onError|onError@io.github.sphrak.either.Either<0:0,0:1>(kotlin.Function1<0:0,io.github.sphrak.either.Either<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (io.github.sphrak.either/Either<#A, #B>).io.github.sphrak.either.extension/onSuccess(kotlin/Function1<#B, io.github.sphrak.either/Either<#A, #B>>): io.github.sphrak.either/Either<#A, #B> // io.github.sphrak.either.extension/onSuccess|onSuccess@io.github.sphrak.either.Either<0:0,0:1>(kotlin.Function1<0:1,io.github.sphrak.either.Either<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (#A).io.github.sphrak.either.extension/asLeft(): io.github.sphrak.either/Either.Left<#A> // io.github.sphrak.either.extension/asLeft|asLeft@0:0(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (#A).io.github.sphrak.either.extension/asRight(): io.github.sphrak.either/Either.Right<#A> // io.github.sphrak.either.extension/asRight|asRight@0:0(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (io.github.sphrak.either/Either<#B, #C>).io.github.sphrak.either.extension/onResult(kotlin/Function1<#B, #A>, kotlin/Function1<#C, #A>): #A // io.github.sphrak.either.extension/onResult|onResult@io.github.sphrak.either.Either<0:1,0:2>(kotlin.Function1<0:1,0:0>;kotlin.Function1<0:2,0:0>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (io.github.sphrak.either/Either<#B, #C>).io.github.sphrak.either/flatMap(kotlin/Function1<#C, io.github.sphrak.either/Either<#B, #A>>): io.github.sphrak.either/Either<#B, #A> // io.github.sphrak.either/flatMap|flatMap@io.github.sphrak.either.Either<0:1,0:2>(kotlin.Function1<0:2,io.github.sphrak.either.Either<0:1,0:0>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (io.github.sphrak.either/Either<#B, #C>).io.github.sphrak.either.coroutines/flatMap(kotlin.coroutines/SuspendFunction1<#C, io.github.sphrak.either/Either<#B, #A>>): io.github.sphrak.either/Either<#B, #A> // io.github.sphrak.either.coroutines/flatMap|flatMap@io.github.sphrak.either.Either<0:1,0:2>(kotlin.coroutines.SuspendFunction1<0:2,io.github.sphrak.either.Either<0:1,0:0>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (io.github.sphrak.either/Either<#B, #C>).io.github.sphrak.either.coroutines/map(kotlin.coroutines/SuspendFunction1<#C, #A>): io.github.sphrak.either/Either<#B, #A> // io.github.sphrak.either.coroutines/map|map@io.github.sphrak.either.Either<0:1,0:2>(kotlin.coroutines.SuspendFunction1<0:2,0:0>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (io.github.sphrak.either/Either<#B, #C>).io.github.sphrak.either.extension/eitherSuspend(kotlin.coroutines/SuspendFunction1<#B, #A>, kotlin.coroutines/SuspendFunction1<#C, #A>): #A // io.github.sphrak.either.extension/eitherSuspend|eitherSuspend@io.github.sphrak.either.Either<0:1,0:2>(kotlin.coroutines.SuspendFunction1<0:1,0:0>;kotlin.coroutines.SuspendFunction1<0:2,0:0>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (io.github.sphrak.either/Either<#B, #C>).io.github.sphrak.either.extension/mapSuspend(kotlin/Function1<#C, #A>): io.github.sphrak.either/Either<#B, #A> // io.github.sphrak.either.extension/mapSuspend|mapSuspend@io.github.sphrak.either.Either<0:1,0:2>(kotlin.Function1<0:2,0:0>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (io.github.sphrak.either/Either<#B, #C>).io.github.sphrak.either.extension/onResultSuspend(kotlin.coroutines/SuspendFunction1<#B, #A>, kotlin.coroutines/SuspendFunction1<#C, #A>): #A // io.github.sphrak.either.extension/onResultSuspend|onResultSuspend@io.github.sphrak.either.Either<0:1,0:2>(kotlin.coroutines.SuspendFunction1<0:1,0:0>;kotlin.coroutines.SuspendFunction1<0:2,0:0>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (io.github.sphrak.either/Either<#B, #C>).io.github.sphrak.either/flatMapSuspend(kotlin/Function1<#C, io.github.sphrak.either/Either<#B, #A>>): io.github.sphrak.either/Either<#B, #A> // io.github.sphrak.either/flatMapSuspend|flatMapSuspend@io.github.sphrak.either.Either<0:1,0:2>(kotlin.Function1<0:2,io.github.sphrak.either.Either<0:1,0:0>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final val io.github.sphrak.either.extension/errorOrNull // io.github.sphrak.either.extension/errorOrNull|@io.github.sphrak.either.Either<0:0,0:1>{0§<kotlin.Any?>;1§<kotlin.Any?>}errorOrNull[0]
    final inline fun <#A1: kotlin/Any?, #B1: kotlin/Any?> (io.github.sphrak.either/Either<#A1, #B1>).<get-errorOrNull>(): #A1? // io.github.sphrak.either.extension/errorOrNull.<get-errorOrNull>|<get-errorOrNull>@io.github.sphrak.either.Either<0:0,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final val io.github.sphrak.either.extension/getLeftOrNull // io.github.sphrak.either.extension/getLeftOrNull|@io.github.sphrak.either.Either<0:0,0:1>{0§<kotlin.Any?>;1§<kotlin.Any?>}getLeftOrNull[0]
    final inline fun <#A1: kotlin/Any?, #B1: kotlin/Any?> (io.github.sphrak.either/Either<#A1, #B1>).<get-getLeftOrNull>(): #A1? // io.github.sphrak.either.extension/getLeftOrNull.<get-getLeftOrNull>|<get-getLeftOrNull>@io.github.sphrak.either.Either<0:0,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final val io.github.sphrak.either.extension/getRightOrNull // io.github.sphrak.either.extension/getRightOrNull|@io.github.sphrak.either.Either<0:0,0:1>{0§<kotlin.Any?>;1§<kotlin.Any?>}getRightOrNull[0]
    final inline fun <#A1: kotlin/Any?, #B1: kotlin/Any?> (io.github.sphrak.either/Either<#A1, #B1>).<get-getRightOrNull>(): #B1? // io.github.sphrak.either.extension/getRightOrNull.<get-getRightOrNull>|<get-getRightOrNull>@io.github.sphrak.either.Either<0:0,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final val io.github.sphrak.either.extension/successOrNull // io.github.sphrak.either.extension/successOrNull|@io.github.sphrak.either.Either<0:0,0:1>{0§<kotlin.Any?>;1§<kotlin.Any?>}successOrNull[0]
    final inline fun <#A1: kotlin/Any?, #B1: kotlin/Any?> (io.github.sphrak.either/Either<#A1, #B1>).<get-successOrNull>(): #B1? // io.github.sphrak.either.extension/successOrNull.<get-successOrNull>|<get-successOrNull>@io.github.sphrak.either.Either<0:0,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
sealed class <#A: out kotlin/Any?, #B: out kotlin/Any?> io.github.sphrak.either/Either { // io.github.sphrak.either/Either|null[0]
    constructor <init>() // io.github.sphrak.either/Either.<init>|<init>(){}[0]
    final class <#A1: out kotlin/Any?> Left : io.github.sphrak.either/Either<#A1, kotlin/Nothing> { // io.github.sphrak.either/Either.Left|null[0]
        constructor <init>(#A1) // io.github.sphrak.either/Either.Left.<init>|<init>(1:0){}[0]
        final fun component1(): #A1 // io.github.sphrak.either/Either.Left.component1|component1(){}[0]
        final fun copy(#A1 = ...): io.github.sphrak.either/Either.Left<#A1> // io.github.sphrak.either/Either.Left.copy|copy(1:0){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.github.sphrak.either/Either.Left.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.github.sphrak.either/Either.Left.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.github.sphrak.either/Either.Left.toString|toString(){}[0]
        final val a // io.github.sphrak.either/Either.Left.a|{}a[0]
            final fun <get-a>(): #A1 // io.github.sphrak.either/Either.Left.a.<get-a>|<get-a>(){}[0]
    }
    final class <#A1: out kotlin/Any?> Right : io.github.sphrak.either/Either<kotlin/Nothing, #A1> { // io.github.sphrak.either/Either.Right|null[0]
        constructor <init>(#A1) // io.github.sphrak.either/Either.Right.<init>|<init>(1:0){}[0]
        final fun component1(): #A1 // io.github.sphrak.either/Either.Right.component1|component1(){}[0]
        final fun copy(#A1 = ...): io.github.sphrak.either/Either.Right<#A1> // io.github.sphrak.either/Either.Right.copy|copy(1:0){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.github.sphrak.either/Either.Right.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.github.sphrak.either/Either.Right.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.github.sphrak.either/Either.Right.toString|toString(){}[0]
        final val b // io.github.sphrak.either/Either.Right.b|{}b[0]
            final fun <get-b>(): #A1 // io.github.sphrak.either/Either.Right.b.<get-b>|<get-b>(){}[0]
    }
    final fun <#A1: kotlin/Any?> left(#A1): io.github.sphrak.either/Either.Left<#A1> // io.github.sphrak.either/Either.left|left(0:0){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> right(#A1): io.github.sphrak.either/Either.Right<#A1> // io.github.sphrak.either/Either.right|right(0:0){0§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?> either(kotlin/Function1<#A, #A1>, kotlin/Function1<#B, #A1>): #A1 // io.github.sphrak.either/Either.either|either(kotlin.Function1<1:0,0:0>;kotlin.Function1<1:1,0:0>){0§<kotlin.Any?>}[0]
    final val isLeft // io.github.sphrak.either/Either.isLeft|{}isLeft[0]
        final fun <get-isLeft>(): kotlin/Boolean // io.github.sphrak.either/Either.isLeft.<get-isLeft>|<get-isLeft>(){}[0]
    final val isRight // io.github.sphrak.either/Either.isRight|{}isRight[0]
        final fun <get-isRight>(): kotlin/Boolean // io.github.sphrak.either/Either.isRight.<get-isRight>|<get-isRight>(){}[0]
}
